#+title: Project 6: The Assembler

* Structure and planning

- *main.rs:* Instantiates the Assembler, runs it and handles top level errors.
- *assembler.rs:* Drives the assembly process using the =Parser= and =Code= modules.
- *Parser.rs:* Reads the input file and offers a convenient way to skip through the comments and bank lines, breaking instructions into their main components.
- *Code.rs:* Translates symbolic Hack mnemonics into their binary codes.

* Assembler.rs

The assembler crate defines the =Assembler= struct with the following fields:

- parser: Contains an instance of the Parser.

It also defines these methods:

** build

Creating an instance of the =Assembler= involves reading an env variable for the source file, and checking if the file exists.
This operation can fail for a variety of reasons (For example file not existing or wrong extension), so the method returns a =Result= with a =Box<dyn Error>= variant. The error is propagated and handled in =main.rs= where we exist the program when an Error variant is encountered. There's no reason to continue if we can't successfully create an instance of the Assembler.

* Parser.rs

The assembler crate defines the =Parser= struct with the following fields:

- contents: A vec of Strings that contains the contents of the source file.
- file_index: Keeps track of our position in the file.
- current_line: Keeps track of instruction lines. For now it just skips comments and empty lines. 
 
The Parser also defines these methods:

** build

Returns an instance of the =Parser=. Note that using a functional style with closures is much more efficient.
We are returning a =Result= for the same reasons the =Assembler= returns a =Result=.

#+begin_src rust
  
  let contents: Vec<_> = contents
      .lines()
      .map(|s| s.trim().to_string())
      .collect();

#+end_src

** has_more_lines

Returns true if there are more lines in the file. Initially it should return =false=.

** advance

If has_more_lines is false then we have nothing more to do, we return an Error. Otherwise, we increment our position in the file and if it's a valid instruction (for now it's just any line that is not empty and is not a comment) we increment =current_line=.







  
  

  
