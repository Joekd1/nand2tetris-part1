// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    // Decoding the instruction 
    Mux16(a=instruction , b=aluOut , sel=instruction[15] , out=AregIn );



    //A Register
    Not(in=instruction[15] , out=isAinst );
    Or(a=instruction[5], b=isAinst , out=selAreg);
    ARegister(in=AregIn , load=selAreg , out=regAout, out[0..14]=addressM);
   
    //D Register
    And(a=instruction[4] , b=instruction[15] , out=Dload );
    DRegister(in=aluOut , load=Dload , out=regDout );
    
    Mux16(a=regAout , b=inM , sel=instruction[12] , out=AorM );

    And(a=instruction[3] , b=instruction[15] , out=writeM );

    ALU(x=regDout , y=AorM , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=aluOut, out=outM, zr=zr , ng=ng );

    PC(in=regAout , load=isJMP , inc=true, reset=reset , out[0..14]=pc);

    //Jump logic
    DMux8Way(in=instruction[15] , sel=instruction[0..2] , a=noJMP , b=JGT , c=JEQ , d=JGE , e=JLT , f=JNE , g=JLE , h=JMP );

    // is JGT satisfied? 
    Not(in=ng , out=pos );
    Not(in=zr , out=notzr );

    And(a=pos , b=notzr , out=posnotzr );
    And(a=JGT , b=posnotzr , out=isJGT );

    // is JEG satisfied?
    And(a=JEQ , b=zr , out=isJEQ );

    // is JGE satisfied?
    Or(a=zr , b=pos , out=posorzr );
    And(a=JGE , b=posorzr , out=isJGE );

    // is JLT satisfied?
    And(a=JLT , b=ng , out=isJLT );

    // is JNE satisfied?

    And(a=JNE , b=notzr , out=isJNE );

    // is JLE satisfied?
    Or(a=zr , b=ng , out=ngorzr );
    And(a=JLE , b=ngorzr , out=isJLE );
    
    // Is a Jump condition satisfied?
    Or8Way(in[0]=isJGT, in[1]=isJEQ, in[2]=isJGE, in[3]=isJLT,
            in[4]=isJNE, in[5]=isJLE, in[6]=JMP, in[7]=false
     , out=isJMP );
     
}
